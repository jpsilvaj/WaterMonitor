package sensorNetwork;


/**
* sensorNetwork/_SensorNetworkStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from SensorNetwork.idl
* Thursday, March 26, 2015 8:27:10 PM GMT-03:00
*/

public class _SensorNetworkStub extends org.omg.CORBA.portable.ObjectImpl implements SensorNetworkOperations, org.omg.CORBA.Object, org.omg.CORBA.portable.IDLEntity {

  public void addSensorToNetwork (sensorNetwork.Sensor sensor)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("addSensorToNetwork", true);
                sensorNetwork.SensorHelper.write ($out, sensor);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                addSensorToNetwork (sensor        );
            } finally {
                _releaseReply ($in);
            }
  } // addSensorToNetwork

  public void deleteSensorFromNetwork (sensorNetwork.Sensor sensor)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("deleteSensorFromNetwork", true);
                sensorNetwork.SensorHelper.write ($out, sensor);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                deleteSensorFromNetwork (sensor        );
            } finally {
                _releaseReply ($in);
            }
  } // deleteSensorFromNetwork

  public void updateTemperatureValueToSensor (sensorNetwork.Sensor sensor, int temperature)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("updateTemperatureValueToSensor", true);
                sensorNetwork.SensorHelper.write ($out, sensor);
                $out.write_long (temperature);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                updateTemperatureValueToSensor (sensor, temperature        );
            } finally {
                _releaseReply ($in);
            }
  } // updateTemperatureValueToSensor

  public void updatePhValueToSensor (sensorNetwork.Sensor sensor, int temperature)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("updatePhValueToSensor", true);
                sensorNetwork.SensorHelper.write ($out, sensor);
                $out.write_long (temperature);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                updatePhValueToSensor (sensor, temperature        );
            } finally {
                _releaseReply ($in);
            }
  } // updatePhValueToSensor

  public void updateColorValueToSensor (sensorNetwork.Sensor sensor, int temperature)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("updateColorValueToSensor", true);
                sensorNetwork.SensorHelper.write ($out, sensor);
                $out.write_long (temperature);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                updateColorValueToSensor (sensor, temperature        );
            } finally {
                _releaseReply ($in);
            }
  } // updateColorValueToSensor

  public sensorNetwork.Sensor[] getSensors ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getSensors", true);
                $in = _invoke ($out);
                sensorNetwork.Sensor $result[] = sensorNetwork.SensorsHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getSensors (        );
            } finally {
                _releaseReply ($in);
            }
  } // getSensors

  public String getName ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getName", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getName (        );
            } finally {
                _releaseReply ($in);
            }
  } // getName

  public void start ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("start", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                start (        );
            } finally {
                _releaseReply ($in);
            }
  } // start

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:sensorNetwork/SensorNetwork:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _SensorNetworkStub
